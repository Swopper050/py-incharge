name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event_name == 'release' && 'pypi' || github.event.inputs.environment }}
    permissions:
      id-token: write  # For trusted publishing
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Publish to TestPyPI
      if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

    - name: Publish to PyPI
      if: github.event_name == 'release' || github.event.inputs.environment == 'pypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  verify-install:
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for package availability
      run: sleep 60

    - name: Install and test package from PyPI
      if: github.event_name == 'release' || github.event.inputs.environment == 'pypi'
      run: |
        pip install vattenfall-charger
        python -c "import vattenfall_charger; print('Package installed successfully from PyPI')"

    - name: Install and test package from TestPyPI
      if: github.event.inputs.environment == 'testpypi'
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ vattenfall-charger
        python -c "import vattenfall_charger; print('Package installed successfully from TestPyPI')"